apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: parklense-auth-backend-secrets
  labels:
    app: parklense-auth-backend
    component: secrets
spec:
  provider: aws
  parameters:
    objects: |
      - objectName: arn:aws:secretsmanager:REGION:ACCOUNT:secret:parklense-auth-secrets-SUFFIX
        objectAlias: ".env"
        objectType: "secretsmanager"
        objectVersionStage: "AWSCURRENT"

---
apiVersion: v1
kind: Secret
metadata:
  name: parklense-auth-tls
  labels:
    app: parklense-auth-backend
    component: tls
type: kubernetes.io/tls
data:
  # These will be managed by cert-manager or provided externally
  tls.crt: ""
  tls.key: ""

---
# Service Account for AWS IAM role binding
apiVersion: v1
kind: ServiceAccount
metadata:
  name: parklense-auth-sa
  labels:
    app: parklense-auth-backend
    component: service-account
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT:role/parklense-auth-role
automountServiceAccountToken: true

---
# Role for service account
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: parklense-auth-role
  labels:
    app: parklense-auth-backend
    component: rbac
rules:
  - apiGroups: [""]
    resources: ["secrets", "configmaps"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list"]

---
# Role binding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: parklense-auth-role-binding
  labels:
    app: parklense-auth-backend
    component: rbac
subjects:
  - kind: ServiceAccount
    name: parklense-auth-sa
    namespace: default
roleRef:
  kind: Role
  name: parklense-auth-role
  apiGroup: rbac.authorization.k8s.io 