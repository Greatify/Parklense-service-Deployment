apiVersion: apps/v1
kind: Deployment
metadata:
  name: parklense-auth-backend
  labels:
    app: parklense-auth-backend
    component: backend
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: parklense-auth-backend
      component: backend
  template:
    metadata:
      labels:
        app: parklense-auth-backend
        component: backend
    spec:
      serviceAccountName: parklense-auth-secret-sa
      terminationGracePeriodSeconds: 30
      # securityContext:
      #   runAsNonRoot: true
      #   runAsUser: 1000
      #   runAsGroup: 1000
      #   fsGroup: 1000
      volumes:
        - name: parklense-auth-secrets-volume
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: parklense-auth-backend-secrets
        - name: nginx-config
          configMap:
            name: nginx-config
        - name: nginx-cache
          emptyDir: {}
        - name: config-volume
          configMap:
            name: nginx-config
            items:
              - key: nginx.conf
                path: nginx.conf
        # - name: parklense-auth-storage
        #   persistentVolumeClaim:
        #     claimName: parklense-auth-pvc
        - name: parklense-auth-storage
          emptyDir: {}
        - name: logs-volume
          emptyDir: {}
          # Removed hosts-volume
      containers:
        - name: parklense-auth-backend
          image: 399600302704.dkr.ecr.ap-south-1.amazonaws.com/parklense-auth-service:Enhance_static_file_serving_in-20250716-070826-1f74838
          imagePullPolicy: Always
          resources:
            requests:
              cpu: "2"
              memory: "4Gi"
            limits:
              cpu: "4"
              memory: "8Gi"
          ports:
            - containerPort: 80
              protocol: TCP
          env:
            - name: DJANGO_SETTINGS_MODULE
              value: "config.settings.production"
            - name: REDIS_URL
              value: "redis://redis-service:6379/0"
            - name: WORKERS
              value: "4"
            - name: DJANGO_SECRET_KEY
              value: "ocn+t!pvvi&tf3_s&_biac0q7+nmo=j^$7e2%xhto2_y10)g$p"
            - name: PORT
              value: "8000"
            - name: WITH_NGINX
              value: "true"
            - name: DJANGO_REDIS_PARSER_CLASS
              value: "redis.connection.DefaultParser"
            - name: LOG_LEVEL
              value: "DEBUG"
            - name: DJANGO_LOG_LEVEL
              value: "DEBUG"
            - name: UVICORN_LOG_LEVEL
              value: "debug"
          envFrom:
            - configMapRef:
                name: parklense-env-config
          volumeMounts:
            - name: parklense-auth-secrets-volume
              mountPath: /mnt/secret-store
              readOnly: true
            - name: config-volume
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
            - name: nginx-config
              mountPath: /etc/nginx/conf.d/default.conf
              subPath: default.conf
            - name: nginx-cache
              mountPath: /var/cache/nginx
            - name: parklense-auth-storage
              mountPath: /app/media
            - name: logs-volume
              mountPath: /app/logs
              # Removed hosts-volume mount
          lifecycle:
            postStart:
              exec:
                command: ['sh', '-c', 'cp -R /mnt/secret-store/.env /app/.env']
          # livenessProbe:
          #   httpGet:
          #     path: /api/health/
          #     port: 8000
          #   initialDelaySeconds: 120
          #   timeoutSeconds: 30
          #   periodSeconds: 60
          #   successThreshold: 1
          #   failureThreshold: 5
          # readinessProbe:
          #   httpGet:
          #     path: /api/health/
          #     port: 8000
          #   initialDelaySeconds: 60
          #   timeoutSeconds: 30
          #   periodSeconds: 30
          #   successThreshold: 1
          #   failureThreshold: 3
          # startupProbe:
          #   httpGet:
          #     path: /api/health/
          #     port: 8000
          #   initialDelaySeconds: 30
          #   timeoutSeconds: 30
          #   periodSeconds: 10
          #   successThreshold: 1
          #   failureThreshold: 30
          # securityContext:
          #   allowPrivilegeEscalation: false
          #   readOnlyRootFilesystem: false
          #   capabilities:
          #     drop:
          #       - ALL
          #   runAsNonRoot: true
          #   runAsUser: 1000
          #   runAsGroup: 1000
