apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: parklens-ingress
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type":"redirect","RedirectConfig":{"Protocol":"HTTPS","Port":"443","StatusCode":"HTTP_301"}}'
    alb.ingress.kubernetes.io/healthcheck-path: "/health"
    alb.ingress.kubernetes.io/healthcheck-port: "traffic-port"
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: "20"
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: "5"
    alb.ingress.kubernetes.io/healthy-threshold-count: "3"
    alb.ingress.kubernetes.io/unhealthy-threshold-count: "3"
    alb.ingress.kubernetes.io/ssl-policy: "ELBSecurityPolicy-TLS-1-2-2017-01"
    alb.ingress.kubernetes.io/backend-protocol: "HTTP"
    alb.ingress.kubernetes.io/load-balancer-attributes: "routing.http.xff_header_processing.mode=append,client_authentication.authentication_mode=passthrough"
    alb.ingress.kubernetes.io/waf-fail-open: "true"
    alb.ingress.kubernetes.io/custom-response-headers: "X-AMZN-MTLS-ClientCert:${tls.client_cert}~X-AMZN-TLS-Cipher-Suite:${tls.client_cipher}~X-AMZN-TLS-Version:${tls.client_protocol}"
spec:
  ingressClassName: alb
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: parklens-frontend-service
            port:
              number: 80
  tls:
  - hosts:
    - parklensedev.com
    secretName: tls-secret 