openapi: "3.0.1"
info:
  title: "Parklense Backend Service - Dev"
  description: "API Gateway for Parklense Auth and Vehicle services (Development Environment)"
  version: "1.0.0"
servers:
- url: "https://api.parklensedev.com/{basePath}"
  variables:
    basePath:
      default: ""

# Global security schemes
components:
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  # Health check endpoint - Auth service
  /health:
    get:
      operationId: "globalHealthCheck"
      summary: "Global health check"
      responses:
        '200':
          description: "Service is healthy"
        '503':
          description: "Service is unhealthy"
      x-amazon-apigateway-integration:
        payloadFormatVersion: "1.0"
        type: "http_proxy"
        httpMethod: "GET"
        uri: "http://parklense-auth-dev-alb-2046375436.ap-south-1.elb.amazonaws.com/health/"
        connectionType: "INTERNET"
        requestParameters:
          integration.request.header.Host: "'api.parklensedev.com'"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"

  # Documentation endpoints - Auth service
  /docs:
    get:
      summary: "API documentation"
      responses:
        '200':
          description: "API documentation page"
      x-amazon-apigateway-integration:
        payloadFormatVersion: "1.0"
        type: "http_proxy"
        httpMethod: "GET"
        uri: "http://parklense-auth-dev-alb-2046375436.ap-south-1.elb.amazonaws.com/api/v1/swagger/"
        connectionType: "INTERNET"
        requestParameters:
          integration.request.header.Host: "'api.parklensedev.com'"
        responses:
          default:
            statusCode: "200"

  /schema:
    get:
      summary: "OpenAPI schema"
      responses:
        '200':
          description: "OpenAPI schema in JSON format"
      x-amazon-apigateway-integration:
        payloadFormatVersion: "1.0"
        type: "http_proxy"
        httpMethod: "GET"
        uri: "http://parklense-auth-dev-alb-2046375436.ap-south-1.elb.amazonaws.com/api/schema/"
        connectionType: "INTERNET"
        requestParameters:
          integration.request.header.Host: "'api.parklensedev.com'"
        responses:
          default:
            statusCode: "200"

  # Auth Service - Legacy API v1 routes
  /api/v1/auth/{proxy+}:
    parameters:
    - name: "proxy+"
      in: "path"
      description: "Auth service proxy path"
      required: true
      schema:
        type: "string"
    x-amazon-apigateway-any-method:
      summary: "Auth service endpoints (Legacy API v1)"
      security:
        - {} # Some auth endpoints are public
      responses:
        default:
          description: "Auth service response"
      x-amazon-apigateway-integration:
        payloadFormatVersion: "1.0"
        type: "http_proxy"
        httpMethod: "ANY"
        uri: "http://parklense-auth-dev-alb-2046375436.ap-south-1.elb.amazonaws.com/api/v1/auth/{proxy}"
        connectionType: "INTERNET"
        requestParameters:
          integration.request.path.proxy: "method.request.path.proxy"
          integration.request.header.Host: "'api.parklensedev.com'"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-API-Key'"

  /api/v1/profile/{proxy+}:
    parameters:
    - name: "proxy+"
      in: "path"
      description: "Profile service proxy path"
      required: true
      schema:
        type: "string"
    x-amazon-apigateway-any-method:
      summary: "Profile service endpoints (Legacy API v1)"
      security:
        - JWTAuth: []
      responses:
        default:
          description: "Profile service response"
      x-amazon-apigateway-integration:
        payloadFormatVersion: "1.0"
        type: "http_proxy"
        httpMethod: "ANY"
        uri: "http://parklense-auth-dev-alb-2046375436.ap-south-1.elb.amazonaws.com/api/v1/profile/{proxy}"
        connectionType: "INTERNET"
        requestParameters:
          integration.request.path.proxy: "method.request.path.proxy"
          integration.request.header.Host: "'api.parklensedev.com'"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-API-Key'"

  # Vehicle Service - Legacy API v1 routes (FIXED: Now points to vehicle ALB)
  /api/v1/vehicles/{proxy+}:
    parameters:
    - name: "proxy+"
      in: "path"
      description: "Vehicle service proxy path"
      required: true
      schema:
        type: "string"
    x-amazon-apigateway-any-method:
      summary: "Vehicle service endpoints (Legacy API v1)"
      security:
        - JWTAuth: []
      responses:
        default:
          description: "Vehicle service response"
      x-amazon-apigateway-integration:
        payloadFormatVersion: "1.0"
        type: "http_proxy"
        httpMethod: "ANY"
        uri: "http://parklense-vehicle-dev-alb-1618789014.ap-south-1.elb.amazonaws.com/api/v1/vehicles/{proxy}"
        connectionType: "INTERNET"
        requestParameters:
          integration.request.path.proxy: "method.request.path.proxy"
          integration.request.header.Host: "'vehicle.parklensedev.com'"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-API-Key'"

  # Auth Service - Direct routes (cleaner URLs)
  /auth/{proxy+}:
    parameters:
    - name: "proxy+"
      in: "path"
      description: "Auth service proxy path"
      required: true
      schema:
        type: "string"
    x-amazon-apigateway-any-method:
      operationId: "authServiceProxy"
      summary: "Auth service endpoints (Direct routes)"
      security:
        - {} # Some auth endpoints are public
      responses:
        default:
          description: "Auth service response"
      x-amazon-apigateway-integration:
        payloadFormatVersion: "1.0"
        type: "http_proxy"
        httpMethod: "ANY"
        uri: "http://parklense-auth-dev-alb-2046375436.ap-south-1.elb.amazonaws.com/auth/{proxy}"
        connectionType: "INTERNET"
        requestParameters:
          integration.request.path.proxy: "method.request.path.proxy"
          integration.request.header.Host: "'api.parklensedev.com'"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-API-Key'"



  # Vehicle Service - Direct routes (FIXED: Correct ALB and path mapping)
  /vehicle/{proxy+}:
    parameters:
    - name: "proxy+"
      in: "path"
      description: "Vehicle service proxy path"
      required: true
      schema:
        type: "string"
    x-amazon-apigateway-any-method:
      operationId: "vehicleServiceProxy"
      summary: "Vehicle service endpoints (Direct routes)"
      security:
        - JWTAuth: []
      responses:
        default:
          description: "Vehicle service response"
      x-amazon-apigateway-integration:
        payloadFormatVersion: "1.0"
        type: "http_proxy"
        httpMethod: "ANY"
        uri: "http://parklense-vehicle-dev-alb-1618789014.ap-south-1.elb.amazonaws.com/api/v1/{proxy}"
        connectionType: "INTERNET"
        requestParameters:
          integration.request.path.proxy: "method.request.path.proxy"
          integration.request.header.Host: "'vehicle.parklensedev.com'"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-API-Key'"
# Global CORS configuration
x-amazon-apigateway-cors:
  allowMethods:
  - "DELETE"
  - "GET"
  - "OPTIONS"
  - "PATCH"
  - "POST"
  - "PUT"
  allowHeaders:
  - "authorization"
  - "content-type"
  - "x-api-key"
  - "x-app-version"
  - "x-device-id"
  - "x-platform"
  - "x-request-id"
  exposeHeaders:
  - "x-api-version"
  - "x-request-id"
  maxAge: 3600
  allowCredentials: false
  allowOrigins:
  - "http://127.0.0.1:3000"
  - "http://127.0.0.1:8080"
  - "http://localhost:3000"
  - "http://localhost:3001"
  - "http://localhost:8080"
  - "https://api.parklensedev.com"
  - "https://parklensedev.com"
  - "https://www.parklensedev.com"
  - "https://app.parklensedev.com"
  - "https://admin.parklensedev.com"

# Global gateway responses for error handling
x-amazon-apigateway-gateway-responses:
  DEFAULT_4XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
    responseTemplates:
      application/json: |
        {
          "success": false,
          "error": "$context.error.messageString",
          "request_id": "$context.requestId",
          "timestamp": "$context.requestTime"
        }
  DEFAULT_5XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
    responseTemplates:
      application/json: |
        {
          "success": false,
          "error": "Internal server error",
          "request_id": "$context.requestId",
          "timestamp": "$context.requestTime"
        }

x-amazon-apigateway-importexport-version: "1.0"
