name: CD - Deploy to Development

on:
  repository_dispatch:
    types: [deploy-dev]
  workflow_dispatch:
    inputs:
      image:
        description: 'Docker image to deploy'
        required: true
        default: 'ghcr.io/parklense-auth-service:latest'
      sha:
        description: 'Git SHA of the commit'
        required: true
      commit_message:
        description: 'Original commit message'
        required: true
        default: 'Manual deployment'

jobs:
  deploy-dev:
    runs-on: ubuntu-latest
    environment: 
      name: development
      url: https://auth.heycampus.in
    
    steps:
      - name: Display Deployment Information
        run: |
          echo "Image: ${{ github.event.client_payload.image || github.event.inputs.image }}"
          echo "SHA: ${{ github.event.client_payload.sha || github.event.inputs.sha }}"
          echo "Commit Message: ${{ github.event.client_payload.commit_message || github.event.inputs.commit_message }}"
          echo "Actor: ${{ github.event.client_payload.actor || github.actor }}"

      - name: Checkout deployment repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}
          fetch-depth: 0

      - name: Set environment variables
        run: |
          echo "BACKEND_IMAGE=${{ github.event.client_payload.image || github.event.inputs.image }}" >> $GITHUB_ENV
          echo "COMMIT_SHA=${{ github.event.client_payload.sha || github.event.inputs.sha }}" >> $GITHUB_ENV
          echo "COMMIT_MESSAGE=${{ github.event.client_payload.commit_message || github.event.inputs.commit_message }}" >> $GITHUB_ENV
          echo "DEPLOY_ACTOR=${{ github.event.client_payload.actor || github.actor }}" >> $GITHUB_ENV

    #   - name: Install yq
    #     run: |
    #       sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
    #       sudo chmod +x /usr/local/bin/yq

      - name: Update deployment image tags
        run: |
          yq -i '.spec.template.spec.containers[0].image = env(BACKEND_IMAGE)' k8s/base/deployment/auth-backend-deployment.yaml
          yq -i '.spec.template.spec.containers[0].image = env(BACKEND_IMAGE)' k8s/base/deployment/celery-worker-deployment.yaml
          yq -i '.spec.template.spec.containers[0].image = env(BACKEND_IMAGE)' k8s/base/deployment/celery-beat-deployment.yaml

      - name: Commit and push changes
        run: |
          git config --local user.email "deployment@parklense.com"
          git config --local user.name "Parklense Deployment Bot"
          
          if git diff --quiet; then
            echo "No changes to commit"
          else
            git add k8s/base/deployment/
            git commit -m "ðŸš€ Deploy to dev: ${{ env.COMMIT_MESSAGE }} (SHA: ${{ env.COMMIT_SHA }})"
            git push origin main
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update Kubernetes configuration
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

      - name: Deploy to development environment
        run: |
          kubectl apply -k k8s/overlays/dev
        #   kubectl rollout status deployment/parklense-auth-backend -n dev-parklense-auth --timeout=300s
        #   kubectl rollout status deployment/parklense-auth-celery-worker -n dev-parklense-auth --timeout=300s
        #   kubectl rollout status deployment/parklense-auth-celery-beat -n dev-parklense-auth --timeout=300s

    #   - name: Verify deployment
    #     run: |
    #       kubectl get pods -n dev-parklense-auth
    #       kubectl get services -n dev-parklense-auth
    #       kubectl get ingress -n dev-parklense-auth

    #   - name: Run health checks
    #     run: |
    #       echo "Waiting for deployment to be ready..."
    #       sleep 30
          
    #       # Get the load balancer URL
    #       LB_URL=$(kubectl get ingress parklense-auth-ingress -n dev-parklense-auth -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          
    #       if [ -n "$LB_URL" ]; then
    #         echo "Testing health endpoint: https://$LB_URL/api/health/"
    #         curl -f -s -o /dev/null https://$LB_URL/api/health/ || echo "Health check failed, but continuing..."
    #       else
    #         echo "Load balancer URL not available yet"
    #       fi

    #   - name: Send deployment success notification
    #     if: success()
    #     uses: 8398a7/action-slack@v3
    #     with:
    #       status: success
    #       fields: repo,message,commit,author,action,eventName,ref,workflow
    #       text: |
    #         :rocket: *Deployment to Development Successful*
            
    #         *Environment:* Development
    #         *Deployed by:* ${{ env.DEPLOY_ACTOR }}
    #         *Commit:* ${{ env.COMMIT_SHA }}
    #         *Message:* ${{ env.COMMIT_MESSAGE }}
    #         *Image:* `${{ env.BACKEND_IMAGE }}`
    #         *URL:* https://auth.heycampus.in
            
    #         The deployment has been completed successfully.
    #     env:
    #       SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    #   - name: Send deployment failure notification
    #     if: failure()
    #     uses: 8398a7/action-slack@v3
    #     with:
    #       status: failure
    #       fields: repo,message,commit,author,action,eventName,ref,workflow
    #       text: |
    #         :x: *Deployment to Development Failed*
            
    #         *Environment:* Development
    #         *Deployed by:* ${{ env.DEPLOY_ACTOR }}
    #         *Commit:* ${{ env.COMMIT_SHA }}
    #         *Message:* ${{ env.COMMIT_MESSAGE }}
    #         *Image:* `${{ env.BACKEND_IMAGE }}`
            
    #         Please check the logs for more details.
    #     env:
    #       SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    #   - name: Update deployment status
    #     if: always()
    #     uses: actions/github-script@v7
    #     with:
    #       script: |
    #         const status = '${{ job.status }}' === 'success' ? 'success' : 'failure';
    #         const description = status === 'success' ? 
    #           'Deployment to development completed successfully' : 
    #           'Deployment to development failed';
            
    #         await github.rest.repos.createDeploymentStatus({
    #           owner: context.repo.owner,
    #           repo: context.repo.repo,
    #           deployment_id: context.payload.deployment?.id || 0,
    #           state: status,
    #           description: description,
    #           environment: 'development',
    #           environment_url: 'https://auth.heycampus.in'
    #         }); 