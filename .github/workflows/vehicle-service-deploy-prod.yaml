name: CD - Deploy to Production

on:
  workflow_dispatch:
    inputs:
      image:
        description: 'Docker image to deploy'
        required: true
      sha:
        description: 'Git SHA of the commit'
        required: true
      commit_message:
        description: 'Original commit message'
        required: true
        default: 'Manual production deployment'
      confirm_production:
        description: 'Type "CONFIRM" to proceed with production deployment'
        required: true
        type: string

jobs:
  validate-inputs:
    runs-on: ubuntu-latest
    steps:
      - name: Validate production confirmation
        run: |
          if [ "${{ github.event.inputs.confirm_production }}" != "CONFIRM" ]; then
            echo "Production deployment not confirmed. You must type 'CONFIRM' to proceed."
            exit 1
          fi
          echo "Production deployment confirmed."

  deploy-production:
    needs: validate-inputs
    runs-on: ubuntu-latest
    environment: 
      name: production
      url: https://auth.parklense.com
    
    steps:
      - name: Display Deployment Information
        run: |
          echo "Image: ${{ github.event.inputs.image }}"
          echo "SHA: ${{ github.event.inputs.sha }}"
          echo "Commit Message: ${{ github.event.inputs.commit_message }}"
          echo "Actor: ${{ github.actor }}"
          echo "‚ö†Ô∏è  DEPLOYING TO PRODUCTION ‚ö†Ô∏è"

      - name: Checkout deployment repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.DEPLOYMENT_TOKEN }}
          fetch-depth: 0

      - name: Set environment variables
        run: |
          echo "BACKEND_IMAGE=${{ github.event.inputs.image }}" >> $GITHUB_ENV
          echo "COMMIT_SHA=${{ github.event.inputs.sha }}" >> $GITHUB_ENV
          echo "COMMIT_MESSAGE=${{ github.event.inputs.commit_message }}" >> $GITHUB_ENV
          echo "DEPLOY_ACTOR=${{ github.actor }}" >> $GITHUB_ENV

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Backup current deployment
        run: |
          mkdir -p backup
          cp -r k8s/backend/base/vehicle/deployment/ backup/
          echo "Current deployment backed up"

      - name: Update deployment image tags
        run: |
          # Update vehicle service image tag in overlay files
          sed -i 's|image: .*|image: '"$BACKEND_IMAGE"'|' k8s/backend/overlays/vehicle/prod/kustomization.yaml

      - name: Commit and push changes
        run: |
          git config --local user.email "deployment@parklense.com"
          git config --local user.name "Parklense Deployment Bot"
          
          if git diff --quiet; then
            echo "No changes to commit"
          else
            git add k8s/backend/overlays/vehicle/prod/
            git commit -m "üöÄ Deploy to production: ${{ env.COMMIT_MESSAGE }} (SHA: ${{ env.COMMIT_SHA }})"
            git push origin main
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update Kubernetes configuration
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

      - name: Pre-deployment health check
        run: |
          echo "Checking current production health..."
          kubectl get pods -n prod-parklense-auth
          kubectl get services -n prod-parklense-auth
          
          # Check if all pods are running
          RUNNING_PODS=$(kubectl get pods -n prod-parklense-auth --field-selector=status.phase=Running --no-headers | wc -l)
          TOTAL_PODS=$(kubectl get pods -n prod-parklense-auth --no-headers | wc -l)
          
          echo "Running pods: $RUNNING_PODS / $TOTAL_PODS"
          
          if [ $RUNNING_PODS -eq $TOTAL_PODS ]; then
            echo "‚úÖ All pods are running. Safe to proceed."
          else
            echo "‚ùå Some pods are not running. Please investigate before deployment."
            exit 1
          fi

      - name: Deploy to production environment
        run: |
          echo "üöÄ Starting production deployment..."
          kubectl apply -k k8s/backend/overlays/vehicle/prod
          
          echo "‚è≥ Waiting for deployments to complete..."
          kubectl rollout status deployment/parklense-vehicle-backend -n prod-parklense-vehicle --timeout=600s

      - name: Run comprehensive health checks
        run: |
          echo "üè• Running comprehensive health checks..."
          sleep 60  # Give more time for production
          
          # Get the load balancer URL
          LB_URL=$(kubectl get ingress parklense-vehicle-ingress -n prod-parklense-vehicle -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          
          if [ -n "$LB_URL" ]; then
            echo "Testing health endpoint: https://$LB_URL/api/health/"
            
            # Retry health check up to 5 times
            for i in {1..5}; do
              if curl -f -s -o /dev/null https://$LB_URL/api/health/; then
                echo "‚úÖ Health check passed (attempt $i)"
                break
              else
                echo "‚ùå Health check failed (attempt $i)"
                if [ $i -eq 5 ]; then
                  echo "‚ùå Health check failed after 5 attempts. Deployment may have issues."
                  exit 1
                fi
                sleep 30
              fi
            done
          else
            echo "‚ùå Load balancer URL not available"
            exit 1
          fi





      - name: Send deployment success notification
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: parklens-deployment-alerts
          text: |
            :rocket: *Vehicle Service - PRODUCTION Deployed Successfully* :rocket:
            *By:* ${{ env.DEPLOY_ACTOR }} | *SHA:* ${{ env.COMMIT_SHA }}
            *URL:* https://vehicle.parklense.com
            All health checks passed. üéâ
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send deployment failure notification
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: parklens-deployment-alerts
          text: |
            :rotating_light: *Vehicle Service - PRODUCTION Deployment Failed* :rotating_light:
            *By:* ${{ env.DEPLOY_ACTOR }} | *SHA:* ${{ env.COMMIT_SHA }}
            URGENT: Investigate immediately. Rollback may be required.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Update deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}' === 'success' ? 'success' : 'failure';
            const description = status === 'success' ? 
              'Production deployment completed successfully' : 
              'Production deployment failed';
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id || 0,
              state: status,
              description: description,
              environment: 'production',
              environment_url: 'https://vehicle.parklense.com'
            });

      - name: Create deployment tag
        if: success()
        run: |
          git tag -a "prod-${{ env.COMMIT_SHA }}" -m "Production deployment: ${{ env.COMMIT_MESSAGE }}"
          git push origin "prod-${{ env.COMMIT_SHA }}"

  rollback-on-failure:
    needs: deploy-production
    runs-on: ubuntu-latest
    if: failure()
    environment: 
      name: production-rollback
      url: https://auth.parklense.com

    steps:
      - name: Checkout deployment repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.DEPLOYMENT_TOKEN }}
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update Kubernetes configuration
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

      - name: Rollback deployment
        run: |
          echo "üîÑ Rolling back production deployment..."
          kubectl rollout undo deployment/parklense-auth-backend -n prod-parklense-auth
          kubectl rollout undo deployment/parklense-auth-celery-worker -n prod-parklense-auth
          kubectl rollout undo deployment/parklense-auth-celery-beat -n prod-parklense-auth
          
          echo "‚è≥ Waiting for rollback to complete..."
          kubectl rollout status deployment/parklense-auth-backend -n prod-parklense-auth --timeout=300s
          kubectl rollout status deployment/parklense-auth-celery-worker -n prod-parklense-auth --timeout=300s
          kubectl rollout status deployment/parklense-auth-celery-beat -n prod-parklense-auth --timeout=300s

      - name: Send rollback notification
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          channel: parklens-deployment-alerts
          custom_payload: |
            {
              "text": "üîÑ *PRODUCTION ROLLBACK COMPLETED*",
              "attachments": [{
                "color": "warning",
                "fields": [{
                  "title": "Environment",
                  "value": "Production",
                  "short": true
                }, {
                  "title": "Action",
                  "value": "Automatic rollback due to deployment failure",
                  "short": true
                }]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 