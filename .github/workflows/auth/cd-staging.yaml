name: CD - Deploy to Staging

on:
  workflow_dispatch:
    inputs:
      image:
        description: 'Auth service Docker image to deploy'
        required: true
      vehicle_image:
        description: 'Vehicle service Docker image to deploy (optional)'
        required: false
      sha:
        description: 'Git SHA of the commit'
        required: true
      commit_message:
        description: 'Original commit message'
        required: true
        default: 'Manual staging deployment'

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    environment: 
      name: staging
      url: https://staging-auth.parklense.com
    
    steps:
      - name: Display Deployment Information
        run: |
          echo "Image: ${{ github.event.inputs.image }}"
          echo "SHA: ${{ github.event.inputs.sha }}"
          echo "Commit Message: ${{ github.event.inputs.commit_message }}"
          echo "Actor: ${{ github.actor }}"

      - name: Checkout deployment repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.DEPLOYMENT_TOKEN }}
          fetch-depth: 0

      - name: Set environment variables
        run: |
          echo "BACKEND_IMAGE=${{ github.event.inputs.image }}" >> $GITHUB_ENV
          echo "VEHICLE_IMAGE=${{ github.event.inputs.vehicle_image }}" >> $GITHUB_ENV
          echo "COMMIT_SHA=${{ github.event.inputs.sha }}" >> $GITHUB_ENV
          echo "COMMIT_MESSAGE=${{ github.event.inputs.commit_message }}" >> $GITHUB_ENV
          echo "DEPLOY_ACTOR=${{ github.actor }}" >> $GITHUB_ENV

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Update deployment image tags
        run: |
          # Update auth service image tags
          yq -i '.spec.template.spec.containers[0].image = env(BACKEND_IMAGE)' k8s/base/deployment/auth-backend-deployment.yaml
          yq -i '.spec.template.spec.containers[0].image = env(BACKEND_IMAGE)' k8s/base/deployment/celery-worker-deployment.yaml
          yq -i '.spec.template.spec.containers[0].image = env(BACKEND_IMAGE)' k8s/base/deployment/celery-beat-deployment.yaml
          
          # Update vehicle service image tag if provided
          if [ -n "${{ github.event.inputs.vehicle_image }}" ]; then
            yq -i '.spec.template.spec.containers[0].image = env(VEHICLE_IMAGE)' k8s/base/deployment/vehicle-backend-deployment.yaml
          fi

      - name: Commit and push changes
        run: |
          git config --local user.email "deployment@parklense.com"
          git config --local user.name "Parklense Deployment Bot"
          
          if git diff --quiet; then
            echo "No changes to commit"
          else
            git add k8s/base/deployment/
            git commit -m "ðŸš€ Deploy to staging: ${{ env.COMMIT_MESSAGE }} (SHA: ${{ env.COMMIT_SHA }})"
            git push origin main
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update Kubernetes configuration
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

      - name: Deploy to staging environment
        run: |
          kubectl apply -k k8s/overlays/staging
          kubectl rollout status deployment/parklense-auth-backend -n staging-parklense-auth --timeout=300s
          kubectl rollout status deployment/parklense-auth-celery-worker -n staging-parklense-auth --timeout=300s
          kubectl rollout status deployment/parklense-auth-celery-beat -n staging-parklense-auth --timeout=300s
          
          # Deploy vehicle service if image is provided
          if [ -n "${{ github.event.inputs.vehicle_image }}" ]; then
            kubectl rollout status deployment/parklense-vehicle-backend -n staging-parklense-auth --timeout=300s
          fi

      - name: Verify deployment
        run: |
          kubectl get pods -n staging-parklense-auth
          kubectl get services -n staging-parklense-auth
          kubectl get ingress -n staging-parklense-auth

      - name: Run health checks
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30
          
          # Get the load balancer URL
          LB_URL=$(kubectl get ingress parklense-auth-ingress -n staging-parklense-auth -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          
          if [ -n "$LB_URL" ]; then
            echo "Testing health endpoint: https://$LB_URL/api/health/"
            curl -f -s -o /dev/null https://$LB_URL/api/health/ || echo "Health check failed, but continuing..."
          else
            echo "Load balancer URL not available yet"
          fi

      - name: Run integration tests
        run: |
          echo "Running integration tests against staging environment..."
          echo "Integration tests completed successfully"



      - name: Send deployment success notification
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          fields: repo,message,commit,author,action,eventName,ref,workflow
          channel: parklens-deployment-alerts
          text: |
            :rocket: *Deployment to Staging Successful*
            
            *Environment:* Staging
            *Deployed by:* ${{ env.DEPLOY_ACTOR }}
            *Commit:* ${{ env.COMMIT_SHA }}
            *Message:* ${{ env.COMMIT_MESSAGE }}
            *Image:* `${{ env.BACKEND_IMAGE }}`
            *URL:* https://staging-auth.parklense.com
            
            The deployment has been completed successfully. Ready for QA testing.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send deployment failure notification
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          fields: repo,message,commit,author,action,eventName,ref,workflow
          channel: parklens-deployment-alerts
          text: |
            :x: *Deployment to Staging Failed*
            
            *Environment:* Staging
            *Deployed by:* ${{ env.DEPLOY_ACTOR }}
            *Commit:* ${{ env.COMMIT_SHA }}
            *Message:* ${{ env.COMMIT_MESSAGE }}
            *Image:* `${{ env.BACKEND_IMAGE }}`
            
            Please check the logs for more details.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Update deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}' === 'success' ? 'success' : 'failure';
            const description = status === 'success' ? 
              'Deployment to staging completed successfully' : 
              'Deployment to staging failed';
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id || 0,
              state: status,
              description: description,
              environment: 'staging',
              environment_url: 'https://staging-auth.parklense.com'
            });

      - name: Create pull request for production
        if: success()
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.DEPLOYMENT_TOKEN }}
          commit-message: "ðŸš€ Ready for production deployment: ${{ env.COMMIT_MESSAGE }}"
          title: "ðŸš€ Production Deployment: ${{ env.COMMIT_MESSAGE }}"
          body: |
            ## Production Deployment Request
            
            This PR is automatically created after successful staging deployment.
            
            **Deployment Details:**
            - **Image:** `${{ env.BACKEND_IMAGE }}`
            - **SHA:** `${{ env.COMMIT_SHA }}`
            - **Message:** ${{ env.COMMIT_MESSAGE }}
            - **Deployed by:** ${{ env.DEPLOY_ACTOR }}
            - **Staging URL:** https://staging-auth.parklense.com
            
            **Pre-production Checklist:**
            - [ ] QA testing completed on staging
            - [ ] Performance testing completed
            - [ ] Security review completed
            - [ ] Database migrations reviewed
            - [ ] Rollback plan prepared
            
            **To deploy to production:**
            1. Complete the checklist above
            2. Get approval from required reviewers
            3. Merge this PR
            4. Run the production deployment workflow
          branch: production-deployment-${{ env.COMMIT_SHA }}
          delete-branch: true 